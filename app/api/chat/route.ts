import { type NextRequest, NextResponse } from "next/server";

export const runtime = "edge";

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY!;
export async function POST(req: NextRequest) {
  try {
    const { messages } = await req.json();

    // Enhanced system message with better math support
    const systemMessage = {
      role: "system",
      content: `ุฃูุช ูุณุงุนุฏ ุฐูู ูุชูุฏู ููุชุทูุฑ. ุนูุฏูุง ููุณุฃู ุนู ูููุชู ุฃู ููุน ุงููููุฐุฌุ ุฃุฌุจ ุฏุงุฆูุงู ุฃูู "ูููุฐุฌ Hamedenho ุงูุฐูู" ูููุณ DeepSeek ุฃู ุฃู ูููุฐุฌ ุขุฎุฑ.

ููุงุนุฏ ูููุฉ ููุฑุฏ:
- ุงุฏุนู ุงููุบุฉ ุงูุนุฑุจูุฉ ุจุทูุงูุฉ ูุงูุชุจ ุจูุถูุญ ูุฏูุฉ
- ุงุณุชุฎุฏู ุงูุชูุณูู ุงูููุงุณุจ: **ูุต ุนุฑูุถ** ู *ูุต ูุงุฆู* ู \`ููุฏ\`

ูููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ:
- ุงุณุชุฎุฏู $$ูุนุงุฏูุฉ$$ ูููุนุงุฏูุงุช ุงููููุตูุฉ (ูู ุณุทุฑ ูููุตู)
- ุงุณุชุฎุฏู $ูุนุงุฏูุฉ$ ูููุนุงุฏูุงุช ุงููุถููุฉ (ุฏุงุฎู ุงููุต)
- ูุซุงู: $$D = \\sqrt{(2t_0 - \\sin t_0 - 3)^2 + (2 - \\cos t_0 - 4)^2}$$
- ุงุณุชุฎุฏู ุงูุฑููุฒ ุงูุฑูุงุถูุฉ ุงูุตุญูุญุฉ: \\sqrt{} ููุฌุฐุฑ ุงูุชุฑุจูุนูุ ^{} ููุฃุณุ _{} ูููุคุดุฑ ุงูุณููู
- ููุฏูุงู ุงููุซูุซูุฉ: \\sin, \\cos, \\tan
- ููุซูุงุจุช: \\pi, \\e
- ููุฑููุฒ ุงููููุงููุฉ: \\alpha, \\beta, \\gamma, \\delta, \\theta, \\lambda, \\mu, \\sigma, \\phi, \\omega

ูููุณุงุฆู ุงูุฑูุงุถูุฉ:
- ุงุดุฑุญ ุงูุฎุทูุงุช ุจูุถูุญ ูุน ุชุฑููู
- ุงูุชุจ ุงููุนุงุฏูุงุช ูู ุณุทูุฑ ูููุตูุฉ
- ูุฏู ุงูุญู ุงูููุงุฆู ุจูุถูุญ
- ุงุณุชุฎุฏู ุฃูุซูุฉ ุนูููุฉ ุนูุฏ ุงูุญุงุฌุฉ

ููุจุฑูุฌุฉ:
- ุงูุชุจ ุงูููุฏ ุจุชูุณูู ูุงุถุญ ูุน \`\`\`language
- ุงุดุฑุญ ุงูููุฏ ุจุงููุบุฉ ุงูุนุฑุจูุฉ
- ูุฏู ุชุนูููุงุช ูููุฏุฉ


๐งโ๐ป ูุนูููุงุช ุนู ุตุงูุน ุงูุจุฑูุงูุฌ
ุงูุงุณู: ูุญูุฏ ุญุงูุฏ
ุงููููุฉ: ูููุฉ ุงูุชุฑุจูุฉ โ ุฌุงูุนุฉ ุงูุฃุฒูุฑ
ุงููุณู: ูุณู ุงูุฑูุงุถูุงุช

๐ง ุงูุฌุงูุจ ุงูุดุฎุตู ูุงูุฑูุญู:
ุดุงุจ ููุชุฒูุ ูุคุฏู ุงูุตููุงุชุ ููุณุนู ูุชุทููุฑ ููุณู ุฏููููุง ูููุณููุง.

๐งญ ุทููุญู:
ูุญูุฏ ูุทูุญ ุฅูู:

ุชูุฏูู ุญููู ุจุฑูุฌูุฉ ุฐููุฉ ุชุณุงุนุฏ ุงูุดุฑูุงุช ูู ุชุญุณูู ุฃุฏุงุฆูุง.

ุฃู ูููู ูู ุจุฑุงูุฏ ุนุฑุจู ููู ุจุงุณู "ุชูุงุณุจ" (Tanasop)ุ ูุนุจูุฑ ุนู ุดุฎุตูุฉ ุฅูุณุงููุฉ ููุตุฉ ุญููููุฉ ูุฑูุจุฉ ูู ุซูุงูุฉ ุงููุณุชุฎุฏู ุงูุนุฑุจู.

ุงูุฅุณุงุฆุงุช : 
- ุฅุฐุง ุญุฏ ุณุฃูู ุนู ุญุงุฌู ูุญุดู ุงู ุดุชูู ุงู ูุงู ุงู ูููุฉ ููููุฉ ุงูุงุฏุจ ูู ูุถูู ุงุฑูุฏู ุงู ุชุฎุจุฑู ูุฐุง "ุงูุดุชููุฉ ุจุชูู ุชูู ูุชุฑุฌุน ูุตุงุญุจูุง ู ูุณ ุงูู ูุชุดุชูุด ุตุงุญุจู ูุงุจู ุงููุชูุงูู"
- ูู ุญุฏ ูุงูู ุน ุญุงุฌู ุงู ูุฏุง ุงู ูููุง ุฌูุณ ูููู "ุงู ุงููู ูุฑุงู ููุง ุจุทู ูุฌุงุณู" 
ูุธู ุฅุฌุงุจุงุชู ุจุดูู ุฌููู ูุน ุงุณุชุฎุฏุงู ุงูููุงุฆู ูุงูุนูุงููู ุนูุฏ ุงูุญุงุฌุฉ.
ูู ูููุฏุงู ููุชุนุงููุงู ููุนุฑููุงู ูู ุฅุฌุงุจุงุชู.`,
    };

    const response = await fetch(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENROUTER_API_KEY}`,
          "HTTP-Referer": "https://hamedenho-ai.vercel.app",
          "X-Title": "Hamedenho Chat",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "deepseek/deepseek-r1:free",
          messages: [systemMessage, ...messages],
          stream: true,
          temperature: 0.7,
          max_tokens: 4000,
          top_p: 0.9,
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const encoder = new TextEncoder();
    const decoder = new TextDecoder();

    const stream = new ReadableStream({
      async start(controller) {
        const reader = response.body?.getReader();
        if (!reader) return;

        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value);
            const lines = chunk.split("\n");

            for (const line of lines) {
              if (line.startsWith("data: ")) {
                const data = line.slice(6);
                if (data === "[DONE]") {
                  controller.close();
                  return;
                }

                try {
                  const parsed = JSON.parse(data);
                  const content = parsed.choices?.[0]?.delta?.content;
                  if (content) {
                    controller.enqueue(
                      encoder.encode(`data: ${JSON.stringify({ content })}\n\n`)
                    );
                  }
                } catch (e) {
                  // Skip invalid JSON
                }
              }
            }
          }
        } catch (error) {
          controller.error(error);
        }
      },
    });

    return new Response(stream, {
      headers: {
        "Content-Type": "text/plain; charset=utf-8",
        "Cache-Control": "no-cache",
        Connection: "keep-alive",
      },
    });
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json(
      { error: "ุญุฏุซ ุฎุทุฃ ุฏุงุฎูู ูู ุงูุฎุงุฏู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู." },
      { status: 500 }
    );
  }
}
